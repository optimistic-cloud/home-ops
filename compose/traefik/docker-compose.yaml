x-healthcheck: &default-healthcheck
  interval: 180s
  timeout: 10s
  retries: 5
  start_period: 60s

services:
  traefik:
    image: traefik:v3.5.4@sha256:fa528d4565c8c279328c12d466325ee0f65804a75bcdbef737290664ad971d68
    container_name: traefik
    restart: unless-stopped
      #read_only: true
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      <<: *default-healthcheck
    environment:
      TZ: Europe/Berlin
      CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./acme.json:/acme.json
      - ./traefik.yml:/etc/traefik/traefik.yml:ro

    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=https"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=dashboard-oidc@docker"

      # https://main.traefik-oidc-auth.pages.dev/docs/getting-started
      - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.Secret=${TRAEFIK_OIDC_SECRET}"
      - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.Provider.Url=https://id.${DOMAIN}"
      - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.Provider.ClientId=${TRAEFIK_OIDC_CLIENT_ID}"
      - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.Provider.ClientSecret=${TRAEFIK_OIDC_CLIENT_SECRET}"
      - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.Provider.UsePkce=true"
      - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.Provider.Scopes=openid,profile,email"
      # - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.authorization.assertClaims[0].name=groups"
      # - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.authorization.assertClaims[0].anyOf=optimistic_cloud_parents"

      # 1) Catch domain1.com on HTTP and HTTPS
      - "traefik.http.routers.redirect-domain1.rule=Host(`tryrocket.cloud`)"
      - "traefik.http.routers.redirect-domain1.entrypoints=http,https"

      # 2) Tell Traefik to terminate TLS here with the ACME resolver
      - "traefik.http.routers.redirect-domain1.tls=true"
      - "traefik.http.routers.redirect-domain1.tls.certresolver=letsencrypt"

      # 3) Attach the redirectRegex middleware (defined inline below)
      - "traefik.http.routers.redirect-domain1.middlewares=redirect-to-domain2@docker"
      - "traefik.http.routers.redirect-domain1.service=noop-service"

      # 4) Dummy “no-op” service so Traefik has something to bind
      - "traefik.http.services.noop-service.loadbalancer.server.port=80"

      # 5) Inline middleware definition:
      - "traefik.http.middlewares.redirect-to-domain2.redirectregex.regex=^https?://tryrocket\\.cloud/(.*)"
      - "traefik.http.middlewares.redirect-to-domain2.redirectregex.replacement=https://optimistic.cloud/$$1"
      - "traefik.http.middlewares.redirect-to-domain2.redirectregex.permanent=true"
