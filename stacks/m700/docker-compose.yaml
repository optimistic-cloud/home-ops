x-healthcheck: &default-healthcheck
  interval: 180s
  timeout: 10s
  retries: 5
  start_period: 60s

services:
  traefik:
    image: traefik:v3.5.0
    container_name: traefik
    restart: unless-stopped
      #read_only: true
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      <<: *default-healthcheck
    env_file:
      - ./traefik/.env
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/secrets/acme.json:/acme.json
      - ./traefik/secrets/traefik.yml:/etc/traefik/traefik.yml:ro
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=https"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=dashboard-oidc@docker"

      # https://main.traefik-oidc-auth.pages.dev/docs/getting-started
      - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.Secret=${TRAEFIK_OIDC_SECRET}"
      - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.Provider.Url=https://id.${DOMAIN}"
      - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.Provider.ClientId=${TRAEFIK_OIDC_CLIENT_ID}"
      - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.Provider.ClientSecret=${TRAEFIK_OIDC_CLIENT_SECRET}"
      - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.Provider.UsePkce=true"
      - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.Provider.Scopes=openid,profile,email"
      # - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.authorization.assertClaims[0].name=groups"
      # - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.authorization.assertClaims[0].anyOf=optimistic_cloud_parents"

      # 1) Catch domain1.com on HTTP and HTTPS
      - "traefik.http.routers.redirect-domain1.rule=Host(`tryrocket.cloud`)"
      - "traefik.http.routers.redirect-domain1.entrypoints=http,https"

      # 2) Tell Traefik to terminate TLS here with the ACME resolver
      - "traefik.http.routers.redirect-domain1.tls=true"
      - "traefik.http.routers.redirect-domain1.tls.certresolver=letsencrypt"

      # 3) Attach the redirectRegex middleware (defined inline below)
      - "traefik.http.routers.redirect-domain1.middlewares=redirect-to-domain2@docker"
      - "traefik.http.routers.redirect-domain1.service=noop-service"

      # 4) Dummy “no-op” service so Traefik has something to bind
      - "traefik.http.services.noop-service.loadbalancer.server.port=80"

      # 5) Inline middleware definition:
      - "traefik.http.middlewares.redirect-to-domain2.redirectregex.regex=^https?://tryrocket\\.cloud/(.*)"
      - "traefik.http.middlewares.redirect-to-domain2.redirectregex.replacement=https://optimistic.cloud/$$1"
      - "traefik.http.middlewares.redirect-to-domain2.redirectregex.permanent=true"

  vaultwarden:
    image: vaultwarden/server:1.34.1
    container_name: vaultwarden
    restart: unless-stopped
    read_only: true
    env_file:
      - ./vaultwarden/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/alive"]
      <<: *default-healthcheck
    volumes:
      - ./vaultwarden/appdata:/data/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vaultwarden.rule=Host(`vaultwarden.${DOMAIN}`)"
      - "traefik.http.routers.vaultwarden.entrypoints=https"
      - "traefik.http.routers.vaultwarden.tls.certresolver=letsencrypt"
      - "traefik.http.services.vaultwarden.loadbalancer.server.port=80"

  opengist:
    image: ghcr.io/thomiceli/opengist:1.10
    container_name: opengist
    restart: unless-stopped
    # user: "1000:1000"
    # read_only: true
    # ports:
    #   - "6157:6157" # HTTP port
    #   - "2222:2222" # SSH port, can be removed if you don't use SSH
    env_file:
      - ./opengist/.env
    volumes:
      - ./opengist/appdata:/opengist

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gist.rule=Host(`gist.${DOMAIN}`)"
      - "traefik.http.routers.gist.entrypoints=https"
      - "traefik.http.routers.gist.tls.certresolver=letsencrypt"
      - "traefik.http.services.gist.loadbalancer.server.port=6157"

  gitea:
    image: docker.gitea.com/gitea:1.24.5-rootless
    container_name: gitea
    restart: unless-stopped
    user: "1000:1000"
    #read_only: true
    env_file:
      - ./gitea/.env
    volumes:
      - ./gitea/appdata/data:/var/lib/gitea
      - ./gitea/appdata/config:/etc/gitea
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/healthz"]
      <<: *default-healthcheck
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gitea.rule=Host(`git.${DOMAIN}`)"
      - "traefik.http.routers.gitea.entrypoints=https"
      - "traefik.http.routers.gitea.tls.certresolver=letsencrypt"
      - "traefik.http.services.gitea.loadbalancer.server.port=3000"

  pocket-id:
    image: ghcr.io/pocket-id/pocket-id:v1.10.0-distroless
    container_name: pocket-id
    restart: unless-stopped
    user: "1000:1000"
    read_only: true
    depends_on:
      traefik:
        condition: service_healthy
    env_file:
      - ./pocket-id/.env
    volumes:
      - ./pocket-id/appdata:/app/data
      - ./pocket-id/secrets/encfile:/app/secrets/pocket-id.encfile:ro
    healthcheck:
      test: [ "CMD", "/app/pocket-id", "healthcheck" ]
      <<: *default-healthcheck
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pocket-id.rule=Host(`id.${DOMAIN}`)"
      - "traefik.http.routers.pocket-id.entrypoints=https"
      - "traefik.http.routers.pocket-id.tls.certresolver=letsencrypt"
      - "traefik.http.services.pocket-id.loadbalancer.server.port=1411"

  youtrack:
    image: jetbrains/youtrack:2025.2.94372
    container_name: youtrack
    restart: unless-stopped
    volumes:
      - ./youtrack/appdata/data:/opt/youtrack/data
      - ./youtrack/appdata/conf:/opt/youtrack/conf
      - ./youtrack/appdata/logs:/opt/youtrack/logs
      - ./youtrack/appdata/backups:/opt/youtrack/backups
    environment:
      - YOUTRACK_JVM_OPTIONS=-Xmx2g
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.youtrack.rule=Host(`youtrack.${DOMAIN}`)"
      - "traefik.http.routers.youtrack.entrypoints=https"
      - "traefik.http.routers.youtrack.tls.certresolver=letsencrypt"
      - "traefik.http.services.youtrack.loadbalancer.server.port=8080"

  backup:
    image: ghcr.io/optimistic-cloud/toolkit
    container_name: backup-toolkit
    restart: unless-stopped
    hostname: m700.optimistic.cloud
    user: "root:root"
    depends_on:
      - vaultwarden
      - opengist
      - gitea
      - pocket-id
      - traefik
    env_file:
      - ./conf.d/backup/.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      
      - ./conf.d/backup/crontab:/etc/crontab
      - ./conf.d/backup/scripts:/opt/conf.d/backup/scripts

      - ./.env:/opt/.env

      - ./vaultwarden/:/opt/vaultwarden/:ro
      - ./opengist/:/opt/opengist/:ro
      - ./gitea/:/opt/gitea/:ro
      - ./pocket-id/:/opt/pocket-id/:ro
      - ./traefik/:/opt/traefik/:ro
