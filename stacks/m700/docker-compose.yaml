x-healthcheck: &default-healthcheck
  interval: 180s
  timeout: 10s
  retries: 5
  start_period: 60s

services:
  traefik:
    image: traefik:v3.5.2@sha256:f0abbbd11ced29754d4d188c29e9320b613481ec162b6ea5d3a8b6bdd8e5fa54
    container_name: traefik
    restart: unless-stopped
      #read_only: true
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      <<: *default-healthcheck
    environment:
      TZ: Europe/Berlin
      CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./acme.json:/acme.json
      - ./traefik.yml:/etc/traefik/traefik.yml:ro

    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=https"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=dashboard-oidc@docker"

      # https://main.traefik-oidc-auth.pages.dev/docs/getting-started
      - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.Secret=${TRAEFIK_OIDC_SECRET}"
      - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.Provider.Url=https://id.${DOMAIN}"
      - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.Provider.ClientId=${TRAEFIK_OIDC_CLIENT_ID}"
      - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.Provider.ClientSecret=${TRAEFIK_OIDC_CLIENT_SECRET}"
      - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.Provider.UsePkce=true"
      - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.Provider.Scopes=openid,profile,email"
      # - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.authorization.assertClaims[0].name=groups"
      # - "traefik.http.middlewares.dashboard-oidc.plugin.traefik-oidc-auth.authorization.assertClaims[0].anyOf=optimistic_cloud_parents"

      # 1) Catch domain1.com on HTTP and HTTPS
      - "traefik.http.routers.redirect-domain1.rule=Host(`tryrocket.cloud`)"
      - "traefik.http.routers.redirect-domain1.entrypoints=http,https"

      # 2) Tell Traefik to terminate TLS here with the ACME resolver
      - "traefik.http.routers.redirect-domain1.tls=true"
      - "traefik.http.routers.redirect-domain1.tls.certresolver=letsencrypt"

      # 3) Attach the redirectRegex middleware (defined inline below)
      - "traefik.http.routers.redirect-domain1.middlewares=redirect-to-domain2@docker"
      - "traefik.http.routers.redirect-domain1.service=noop-service"

      # 4) Dummy “no-op” service so Traefik has something to bind
      - "traefik.http.services.noop-service.loadbalancer.server.port=80"

      # 5) Inline middleware definition:
      - "traefik.http.middlewares.redirect-to-domain2.redirectregex.regex=^https?://tryrocket\\.cloud/(.*)"
      - "traefik.http.middlewares.redirect-to-domain2.redirectregex.replacement=https://optimistic.cloud/$$1"
      - "traefik.http.middlewares.redirect-to-domain2.redirectregex.permanent=true"

  vaultwarden:
    image: vaultwarden/server:1.34.3@sha256:84fd8a47f58d79a1ad824c27be0a9492750c0fa5216b35c749863093bfa3c3d7
    container_name: vaultwarden
    restart: unless-stopped
    read_only: true
    environment:
      TZ: Europe/Berlin
      
      DOMAIN: https://vaultwarden.${DOMAIN}
      ADMIN_TOKEN: ${VAULTWARDEN_ADMIN_TOKEN}
      SIGNUPS_ALLOWED: false
      INVITATIONS_ALLOWED: false

      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SECURITY: ${SMTP_SECURITY}
      SMTP_USERNAME: ${VAULTWARDEN_SMTP_USERNAME}
      SMTP_PASSWORD: ${VAULTWARDEN_SMTP_PASSWORD}
      SMTP_FROM: ${VAULTWARDEN_SMTP_FROM}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/alive"]
      <<: *default-healthcheck
    volumes:
      - vaultwarden-data:/data/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vaultwarden.rule=Host(`vaultwarden.${DOMAIN}`)"
      - "traefik.http.routers.vaultwarden.entrypoints=https"
      - "traefik.http.routers.vaultwarden.tls.certresolver=letsencrypt"
      - "traefik.http.services.vaultwarden.loadbalancer.server.port=80"

  opengist:
    image: ghcr.io/thomiceli/opengist:1.10@sha256:b3ae8c4614fcfc3099ed08317f0113444f314d3d390e89161cff9b673729d191
    container_name: opengist
    restart: unless-stopped
    # user: "1000:1000"
    # read_only: true
    # ports:
    #   - "6157:6157" # HTTP port
    #   - "2222:2222" # SSH port, can be removed if you don't use SSH
    environment:
      TZ: Europe/Berlin
      # debug, info, warn, error, fatal
      OG_LOG_LEVEL: info

      UID: 1000
      GID: 1000

      OG_CUSTOM_NAME: Optimistic Cloud

      OG_OIDC_CLIENT_KEY: ${OG_OIDC_CLIENT_KEY}
      OG_OIDC_SECRET: ${OG_OIDC_SECRET}
      OG_OIDC_ADMIN_GROUP: ${OG_OIDC_ADMIN_GROUP}

      OG_EXTERNAL_URL: https://gist.${DOMAIN}
      OG_SSH_GIT_ENABLED: false
      OG_OIDC_PROVIDER_NAME: Optimistic Cloud
      OG_OIDC_DISCOVERY_URL: https://id.${DOMAIN}/.well-known/openid-configuration
      OG_OIDC_GROUP_CLAIM_NAME: groups
      # TODO: request scopes missing in opengist https://github.com/thomiceli/opengist/issues/460
      # TODO: https://github.com/thomiceli/opengist/pull/490

    volumes:
      - opengist-data:/opengist
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gist.rule=Host(`gist.${DOMAIN}`)"
      - "traefik.http.routers.gist.entrypoints=https"
      - "traefik.http.routers.gist.tls.certresolver=letsencrypt"
      - "traefik.http.services.gist.loadbalancer.server.port=6157"

  # Add init container to set permissions
  gitea-init:
    image: alpine:3.22.1@sha256:4bcff63911fcb4448bd4fdacec207030997caf25e9bea4045fa6c8c44de311d1
    volumes:
      - gitea-data:/var/lib/gitea
      - gitea-config:/etc/gitea
    command: |
      sh -c "
        chown -R 1000:1000 /var/lib/gitea &&
        chown -R 1000:1000 /etc/gitea &&
        chmod -R 700 /var/lib/gitea &&
        chmod -R 700 /etc/gitea
      "
    restart: "no"

  gitea:
    image: docker.gitea.com/gitea:1.24.6-rootless@sha256:91f2b27e080739f0d19dba716c3214f17257c632cf762e545b44ca577e37052c
    container_name: gitea
    restart: unless-stopped
    user: "1000:1000"
    #read_only: true
    environment:
      TZ: Europe/Berlin

      USER_UID: 1000
      USER_GID: 1000

      GITEA____APP_NAME: Optimistic Cloud

      GITEA__mailer__ENABLED: true
      GITEA__mailer__FROM: ${GITEA_MAILER_FROM}
      GITEA__mailer__PROTOCOL: ${GITEA_MAILER_PROTOCOL}
      GITEA__mailer__SMTP_ADDR: ${SMTP_HOST}
      GITEA__mailer__SMTP_PORT: ${SMTP_PORT}
      GITEA__mailer__USER: ${GITEA_MAILER_USER}
      GITEA__mailer__PASSWD: ${GITEA_MAILER_PASSWD}

      GITEA__server__ROOT_URL: https://git.${DOMAIN}
      GITEA__server__DOMAIN: git.${DOMAIN}

      GITEA__service__ENABLE_BASIC_AUTHENTICATION: false
      GITEA__service__ENABLE_PASSWORD_SIGNIN_FORM: false
      GITEA__service__DISABLE_REGISTRATION: false
      GITEA__service__ALLOW_ONLY_EXTERNAL_REGISTRATION: true
      GITEA__service__SHOW_REGISTRATION_BUTTON: false
      GITEA__service__ENABLE_PASSKEY_AUTHENTICATION: false

      GITEA__openid__ENABLE_OPENID_SIGNIN: false
      GITEA__openid__ENABLE_OPENID_SIGNUP: false

      GITEA__oauth2_client__UPDATE_AVATAR: true
      GITEA__oauth2_client__USERNAME: preferred_username
      GITEA__oauth2_client__OPENID_CONNECT_SCOPES: openid profile email
      GITEA__oauth2_client__ACCOUNT_LINKING: login

      GITEA__server__START_SSH_SERVER: false
      GITEA__server__DISABLE_SSH: true
    volumes:
      - gitea-data:/var/lib/gitea
      - gitea-config:/etc/gitea
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/healthz"]
      <<: *default-healthcheck
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gitea.rule=Host(`git.${DOMAIN}`)"
      - "traefik.http.routers.gitea.entrypoints=https"
      - "traefik.http.routers.gitea.tls.certresolver=letsencrypt"
      - "traefik.http.services.gitea.loadbalancer.server.port=3000"

  # Add init container to set permissions
  pocket-id-init:
    image: alpine:3.22.1@sha256:4bcff63911fcb4448bd4fdacec207030997caf25e9bea4045fa6c8c44de311d1
    volumes:
      - pocket-id-data:/app/data
    command: |
      sh -c "
        chown -R 65532:65532 /app/data &&
        chmod -R 700 /app/data
      "
    restart: "no"

  pocket-id:
    image: ghcr.io/pocket-id/pocket-id:v1.11.1-distroless@sha256:28f7c5b73d8fdb42db36e755f0c4bcd3190e02fb2b2c75c6e0cb16a09efb9d8a
    container_name: pocket-id
    restart: unless-stopped
    user: "65532:65532"
    #read_only: true
    depends_on:
      traefik:
        condition: service_healthy
    environment:
      TZ: Europe/Berlin

      PUID: 1000
      PGID: 1000

      APP_NAME: Optimistic Cloud
      APP_URL: https://id.${DOMAIN}

      SESSION_DURATION: 480
      UI_CONFIG_DISABLED: true

      DB_PROVIDER: sqlite
      DB_CONNECTION_STRING: file:/app/data/pocket-id.db?_pragma=journal_mode(WAL)&_pragma=busy_timeout(2500)&_txlock=immediate
      TRUST_PROXY: true
      MAXMIND_LICENSE_KEY:
      KEYS_STORAGE: file
      ENCRYPTION_KEY_FILE: /app/secrets/pocket-id.encfile

      EMAIL_ONE_TIME_ACCESS_AS_UNAUTHENTICATED_ENABLED: true
      EMAIL_LOGIN_NOTIFICATION_ENABLED: true
      EMAILS_VERIFIED: true

      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_FROM: ${POCKET_ID_SMTP_FROM}
      SMTP_USER: ${POCKET_ID_SMTP_USER}
      SMTP_PASSWORD: ${POCKET_ID_SMTP_PASSWORD}
      SMTP_SKIP_CERT_VERIFY: false
      SMTP_TLS: ${SMTP_SECURITY}

      ANALYTICS_DISABLED: true

    volumes:
      - pocket-id-data:/app/data
      - ./pocket-id.encfile:/app/secrets/pocket-id.encfile:ro
    healthcheck:
      test: [ "CMD", "/app/pocket-id", "healthcheck" ]
      <<: *default-healthcheck
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pocket-id.rule=Host(`id.${DOMAIN}`)"
      - "traefik.http.routers.pocket-id.entrypoints=https"
      - "traefik.http.routers.pocket-id.tls.certresolver=letsencrypt"
      - "traefik.http.services.pocket-id.loadbalancer.server.port=1411"

volumes:
  traefik-acme:
  traefik-config:
  vaultwarden-data:
    name: vaultwarden-data
  opengist-data:
  gitea-data:
  gitea-config:
  pocket-id-data:
