x-healthcheck: &default-healthcheck
  interval: 180s
  timeout: 30s
  retries: 5
  start_period: 60s

services:
  caddy:
    container_name: caddy
    build:
      context: ./conf.d/caddy
      dockerfile: Dockerfile 
    restart: unless-stopped
    environment:
      CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN}
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./data:/data
      - ./config:/config
      - ./conf.d/caddy/Caddyfile:/etc/caddy/Caddyfile:ro

  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest@sha256:a53cabe919f87b39d07a5ced17cf28bbe3f01a47b2cd0f37864bdf1f562a205a
    restart: unless-stopped
    expose:
      - "8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      DOZZLE_ENABLE_ACTIONS: true
      DOZZLE_NO_ANALYTICS: true
      DOZZLE_REMOTE_AGENT: ${DOZZLE_REMOTE_AGENT}
    healthcheck:
      test: ["CMD", "/dozzle", "healthcheck"]
      <<: *default-healthcheck

  beszel:
    image: henrygd/beszel:latest@sha256:04477bdcb2670e99d70d8b1d0b778e0f7df51e77506a900ea59a044e33ac9951
    container_name: beszel
    restart: unless-stopped
    expose:
      - 8090
    volumes:
      - beszel-data:/beszel_data
      - beszel-socket:/beszel_socket
    environment:
      TZ: Europe/Berlin
      USER_CREATION: true
      DISABLE_PASSWORD_AUTH: true
    healthcheck:
      test: ['CMD', '/beszel', 'health', '--url', 'http://localhost:8090']
      <<: *default-healthcheck

  beszel-agent:
    image: henrygd/beszel-agent:latest@sha256:0598b9af65a48422f634d2f636b5f44a17397798e7c74cee6a8c5f4a1e78ef2c
    container_name: beszel-agent
    restart: unless-stopped
    network_mode: host
    volumes:
      - beszel-agent-data:/var/lib/beszel-agent
      - beszel-socket:/beszel_socket
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      LISTEN: 45876
      HUB_URL: http://beszel:8090
      TOKEN: "${BESZEL_TOKEN}"
      KEY: "${BESZEL_KEY}"
    healthcheck:
      test: ['CMD', '/agent', 'health']
      <<: *default-healthcheck

  vaultwarden:
    image: vaultwarden/server:1.34.3@sha256:84fd8a47f58d79a1ad824c27be0a9492750c0fa5216b35c749863093bfa3c3d7
    container_name: vaultwarden
    restart: unless-stopped
    read_only: true
    expose:
      - "80"
    environment:
      TZ: Europe/Berlin
      
      DOMAIN: https://vaultwarden.${DOMAIN}
      ADMIN_TOKEN: ${VAULTWARDEN_ADMIN_TOKEN}
      SIGNUPS_ALLOWED: false
      INVITATIONS_ALLOWED: false

      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SECURITY: ${SMTP_SECURITY}
      SMTP_USERNAME: ${VAULTWARDEN_SMTP_USERNAME}
      SMTP_PASSWORD: ${VAULTWARDEN_SMTP_PASSWORD}
      SMTP_FROM: ${VAULTWARDEN_SMTP_FROM}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/alive"]
      <<: *default-healthcheck
    volumes:
      - vaultwarden-data:/data/

  # Deployment notes
  # Opengist admin is provisioned via Pocket ID
  # Opengist users are provisiond via Pocket ID
  opengist:
    image: ghcr.io/thomiceli/opengist:1.11@sha256:86e7eb1f9fb2aa7b5d620fe452406de331c6e4d1c47b4d23d46b4b01e1ebf69d
    container_name: opengist
    restart: unless-stopped
    expose:
      - "6157"
    # user: "1000:1000"
    # read_only: true
    # ports:
    #   - "6157:6157" # HTTP port
    #   - "2222:2222" # SSH port, can be removed if you don't use SSH
    environment:
      TZ: Europe/Berlin
      # debug, info, warn, error, fatal
      OG_LOG_LEVEL: info

      UID: 1000
      GID: 1000

      OG_CUSTOM_NAME: Optimistic Cloud

      OG_OIDC_CLIENT_KEY: ${OG_OIDC_CLIENT_KEY}
      OG_OIDC_SECRET: ${OG_OIDC_SECRET}
      OG_OIDC_ADMIN_GROUP: ${OG_OIDC_ADMIN_GROUP}

      OG_EXTERNAL_URL: https://gist.${DOMAIN}
      OG_SSH_GIT_ENABLED: false
      OG_OIDC_PROVIDER_NAME: Optimistic Cloud
      OG_OIDC_DISCOVERY_URL: https://id.${DOMAIN}/.well-known/openid-configuration
      OG_OIDC_GROUP_CLAIM_NAME: groups

    volumes:
      - opengist-data:/opengist

  # Add init container to set permissions
  gitea-init:
    image: alpine:3.22.2@sha256:4b7ce07002c69e8f3d704a9c5d6fd3053be500b7f1c69fc0d80990c2ad8dd412
    volumes:
      - gitea-data:/var/lib/gitea
      - gitea-config:/etc/gitea
    command: |
      sh -c "
        chown -R 1000:1000 /var/lib/gitea &&
        chown -R 1000:1000 /etc/gitea &&
        chmod -R 700 /var/lib/gitea &&
        chmod -R 700 /etc/gitea
      "
    restart: "no"


  # Deployment notes
  # Gitea admin is created on first deployment
  # Gitea users are provisiond via Pocket ID
  # TODO: https://github.com/go-gitea/gitea/issues/31995
  gitea:
    image: docker.gitea.com/gitea:1.25.0-rootless@sha256:e49c562ab80d7240fe1436aa56a4679644115d682421e5711f681dc3ad8a32cd
    container_name: gitea
    restart: unless-stopped
    expose:
      - "3000"
    user: "1000:1000"
    #read_only: true
    environment:
      TZ: Europe/Berlin

      USER_UID: 1000
      USER_GID: 1000

      GITEA____APP_NAME: Optimistic Cloud

      GITEA__mailer__ENABLED: true
      GITEA__mailer__FROM: ${GITEA_MAILER_FROM}
      GITEA__mailer__PROTOCOL: ${GITEA_MAILER_PROTOCOL}
      GITEA__mailer__SMTP_ADDR: ${SMTP_HOST}
      GITEA__mailer__SMTP_PORT: ${SMTP_PORT}
      GITEA__mailer__USER: ${GITEA_MAILER_USER}
      GITEA__mailer__PASSWD: ${GITEA_MAILER_PASSWD}

      GITEA__server__ROOT_URL: https://git.${DOMAIN}
      GITEA__server__DOMAIN: git.${DOMAIN}

      GITEA__service__ENABLE_BASIC_AUTHENTICATION: false
      GITEA__service__ENABLE_PASSWORD_SIGNIN_FORM: false
      GITEA__service__DISABLE_REGISTRATION: false
      GITEA__service__ALLOW_ONLY_EXTERNAL_REGISTRATION: true
      GITEA__service__SHOW_REGISTRATION_BUTTON: false
      GITEA__service__ENABLE_PASSKEY_AUTHENTICATION: false

      GITEA__openid__ENABLE_OPENID_SIGNIN: false
      GITEA__openid__ENABLE_OPENID_SIGNUP: false

      GITEA__oauth2_client__UPDATE_AVATAR: true
      GITEA__oauth2_client__USERNAME: preferred_username
      GITEA__oauth2_client__OPENID_CONNECT_SCOPES: openid profile email
      GITEA__oauth2_client__ACCOUNT_LINKING: login

      GITEA__server__START_SSH_SERVER: false
      GITEA__server__DISABLE_SSH: true
    volumes:
      - gitea-data:/var/lib/gitea
      - gitea-config:/etc/gitea
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/healthz"]
      <<: *default-healthcheck

  # Add init container to set permissions
  pocket-id-init:
    image: alpine:3.22.2@sha256:4b7ce07002c69e8f3d704a9c5d6fd3053be500b7f1c69fc0d80990c2ad8dd412
    volumes:
      - pocket-id-data:/app/data
    command: |
      sh -c "
        chown -R 65532:65532 /app/data &&
        chmod -R 700 /app/data
      "
    restart: "no"

  pocket-id:
    image: ghcr.io/pocket-id/pocket-id:v1.14.2-distroless@sha256:1eea2fa6b8ebe3f2a84733ee78fd983091803a83a36a5666c0f0d3ea80032189
    container_name: pocket-id
    restart: unless-stopped
    expose:
      - "1411"
    user: "65532:65532"
    #read_only: true
    #depends_on:
    #  traefik:
    #    condition: service_healthy
    environment:
      TZ: Europe/Berlin

      PUID: 1000
      PGID: 1000

      APP_NAME: Optimistic Cloud
      APP_URL: https://id.${DOMAIN}

      SESSION_DURATION: 480
      UI_CONFIG_DISABLED: true

      DB_PROVIDER: sqlite
      DB_CONNECTION_STRING: file:/app/data/pocket-id.db?_pragma=journal_mode(WAL)&_pragma=busy_timeout(2500)&_txlock=immediate
      TRUST_PROXY: true
      MAXMIND_LICENSE_KEY:
      KEYS_STORAGE: file
      ENCRYPTION_KEY_FILE: /app/secrets/pocket-id.encfile

      EMAIL_ONE_TIME_ACCESS_AS_UNAUTHENTICATED_ENABLED: true
      EMAIL_LOGIN_NOTIFICATION_ENABLED: true
      EMAILS_VERIFIED: true

      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_FROM: ${POCKET_ID_SMTP_FROM}
      SMTP_USER: ${POCKET_ID_SMTP_USER}
      SMTP_PASSWORD: ${POCKET_ID_SMTP_PASSWORD}
      SMTP_SKIP_CERT_VERIFY: false
      SMTP_TLS: ${SMTP_SECURITY}

      ANALYTICS_DISABLED: true

    volumes:
      - pocket-id-data:/app/data
      - ./pocket-id.encfile:/app/secrets/pocket-id.encfile:ro
    healthcheck:
      test: [ "CMD", "/app/pocket-id", "healthcheck" ]
      <<: *default-healthcheck

  # Deployment notes
  # SSO auth https://github.com/iv-org/invidious/pull/3164
  invidious:
    image: quay.io/invidious/invidious:latest@sha256:2836b5b8226a53a9cc2afdbd5f5fe6bccdd200f2e17cd92a828b4dc8d8b5cc06
    container_name: invidious
    restart: unless-stopped
    expose:
      - "3000"
    environment:
      TZ: Europe/Berlin
      # Please read the following file for a comprehensive list of all available
      # configuration options and their associated syntax:
      # https://github.com/iv-org/invidious/blob/master/config/config.example.yml
      INVIDIOUS_CONFIG_FILE: /config/invidious/config.yml
    volumes:
      - ./conf.d/invidious/config.yml:/config/invidious/config.yml
    healthcheck:
      test: wget -nv --tries=1 --spider http://127.0.0.1:3000/api/v1/trending || exit 1
      <<: *default-healthcheck
    logging:
      options:
        max-size: "1G"
        max-file: "4"
    depends_on:
      - invidious-db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.invidious.rule=Host(`invidious.${DOMAIN}`)"
      - "traefik.http.routers.invidious.entrypoints=https"
      - "traefik.http.routers.invidious.tls.certresolver=letsencrypt"
      - "traefik.http.services.invidious.loadbalancer.server.port=3000"

  companion:
    image: quay.io/invidious/invidious-companion:latest@sha256:4320469a01fd3e7f554c8a7ad8d0fd388f325b27cc39a760c64edb36914f06ea
    container_name: invidious-companion
    environment:
      TZ: Europe/Berlin
    # Use the key generated in the 2nd step
      SERVER_SECRET_KEY: ${INVIDIOUS_SERVER_SECRET_KEY}
    restart: unless-stopped
    # Uncomment only if you have configured "public_url" for Invidious companion
    # Or if you want to use Invidious companion as an API in your program.
    # Remove "127.0.0.1:" if used from an external IP
    #ports:
    #  - "127.0.0.1:8282:8282"
    logging:
      options:
        max-size: "1G"
        max-file: "4"
    cap_drop:
      - ALL
    read_only: true
    # cache for youtube library
    volumes:
      - companioncache:/var/tmp/youtubei.js:rw
    security_opt:
      - no-new-privileges:true

  invidious-db:
    image: docker.io/library/postgres:14@sha256:d35fe6e6bd8d17d66dc383e18f68ce73bc9772cd3121eaa96e2c7944fe17d337
    container_name: invidious-db
    restart: unless-stopped
    volumes:
      - postgresdata:/var/lib/postgresql/data
      - ./conf.d/invidious/sql:/config/sql
      - ./conf.d/invidious/init-invidious-db.sh:/docker-entrypoint-initdb.d/init-invidious-db.sh
    environment:
      TZ: Europe/Berlin
      POSTGRES_DB: ${INVIDIOUS_POSTGRES_DB}
      POSTGRES_USER: ${INVIDIOUS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${INVIDIOUS_POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      <<: *default-healthcheck

  wallos:
    container_name: wallos
    image: bellamy/wallos:latest@sha256:1277c83dc626853ac14658c1b0aaf003e1bced213c37370d149fdd9622b5747f
    expose:
      - "80"
    environment:
      TZ: 'Europe/Berlin'
    volumes:
      - wallos-data:/var/www/html
    restart: unless-stopped

volumes:
  vaultwarden-data:
    name: vaultwarden-data
  opengist-data:
    name: opengist-data
  gitea-data:
  gitea-config:
  pocket-id-data:
    name: pocket-id-data
  postgresdata:
  companioncache:
  wallos-data:
    name: wallos-data
  beszel-data:
    name: beszel-data
  beszel-socket:
    name: beszel-socket
  beszel-agent-data:
    name: beszel-agent-data